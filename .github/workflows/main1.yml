name: Build Custom Kernel 1

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          sudo apt update
          sudo apt install -y build-essential bc bison flex libssl-dev ccache \
            gcc-aarch64-linux-gnu git wget curl unzip python3 zip

      - name: Download clang toolchain
        run: |
          mkdir -p toolchains
          cd toolchains
          wget https://releases.llvm.org/15.0.7/clang+llvm-15.0.7-x86_64-linux-gnu-ubuntu-22.04.tar.xz
          tar -xf clang+llvm-15.0.7-x86_64-linux-gnu-ubuntu-22.04.tar.xz
          mv clang+llvm-15.0.7-x86_64-linux-gnu-ubuntu-22.04 clang
          echo "TOOLCHAIN=$PWD/clang" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
          set -e
          exec > >(tee build.log) 2>&1
          export PATH=$TOOLCHAIN/bin:$PATH
          export ARCH=arm64
          export SUBARCH=arm64
          # Auto-detect defconfig (replace with specific if you know it)
          DEFCONFIG=$(ls arch/arm64/configs | grep defconfig | head -n 1)
          echo "Using defconfig: $DEFCONFIG"
          make O=out $DEFCONFIG CC=clang CROSS_COMPILE=aarch64-linux-gnu-
          make -j$(nproc) O=out CC=clang CROSS_COMPILE=aarch64-linux-gnu-
          echo "Build completed"

      - name: Prepare artifacts
        if: always()
        run: |
          mkdir -p output
          cp -r out/arch/arm64/boot/Image* output/ || true
          cp -r out/arch/arm64/boot/dts output/ || true
          cp build.log output/ || true

      - name: Upload to Telegram
        if: always()
        run: |
          TOKEN="7863915048:AAG0PjWioCIeIlP9kDdvsTDkKfJ2J57dR-"
          CHAT_ID="1910625218"

          # Send log
          curl -s -F document=@output/build.log "https://api.telegram.org/bot$TOKEN/sendDocument" -F chat_id=$CHAT_ID -F caption="Kernel Build Log"

          # If kernel built, zip and send
          if ls output/Image* 1> /dev/null 2>&1; then
            cd output
            zip -r kernel_output.zip Image* dts || true
            curl -s -F document=@kernel_output.zip "https://api.telegram.org/bot$TOKEN/sendDocument" -F chat_id=$CHAT_ID -F caption="Kernel Build Output"
          else
            echo "No Image.gz found. Only log sent."
          fi

      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kernel-build
          path: output
          
